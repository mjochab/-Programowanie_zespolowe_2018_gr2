/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package warsztatsamochodowy.controllers;

import java.io.IOException;
import java.net.URL;
import java.sql.Connection;
import java.sql.Statement;
import java.util.ResourceBundle;
import javafx.event.ActionEvent;
import javafx.fxml.FXML;
import javafx.fxml.Initializable;
import javafx.scene.control.Button;
import javafx.scene.control.ComboBox;
<<<<<<< HEAD
=======

>>>>>>> 5c0bc0b3c6418325dbc7de7514639bd0b385bb05
import javafx.scene.control.RadioButton;
import javafx.scene.control.TextField;
import javafx.stage.Stage;
import warsztatsamochodowy.Helper;
import warsztatsamochodowy.database.DatabaseConnection;

/**
 * FXML Controller class
 *
 * @author Artur
 */

public class NewWorkersController implements Initializable {

    @FXML
    private Button b_zatwierdz;
    @FXML
    private Button b_powrot;
    @FXML
    private TextField tfImie;
    @FXML
    private TextField tfNazwisko;
    @FXML
    private TextField tfMiejscowosc;
    @FXML
    private TextField tfAdres;
    @FXML
    private TextField tfLogin;
    @FXML
    private TextField tfHaslo;
    @FXML
    private TextField tfTelefon;
    @FXML
    private TextField tfEmial;

    private Helper helper = new Helper();
<<<<<<< HEAD

=======
    @FXML
>>>>>>> 5c0bc0b3c6418325dbc7de7514639bd0b385bb05
    private ComboBox<String> cbSpecjalizacja;
    @FXML
    private ComboBox<String> cbStatus;
    @FXML
    private TextField tfWyagrodzenie;
    /**
     * Initializes the controller class.
     */

<<<<<<< HEAD
    DatabaseConnection PolaczenieDB = new DatabaseConnection();
    Connection sesja = PolaczenieDB.connectDatabase();
    @FXML
    private ComboBox<String> cbStatus;
    @FXML
    private TextField tfWynagordzenie;
    @FXML
    private ComboBox<String> cbSpecjalizacja;

    
    public void initialize(URL url, ResourceBundle rb) {

        cbStatus.getItems().addAll("Zatrudniony",
                "Na urlopie",
                "Zwolniony"
        );
        
        cbSpecjalizacja.getItems().addAll("Diagnosta",
=======
    
    DatabaseConnection PolaczenieDB = new DatabaseConnection();


    Connection sesja = PolaczenieDB.connectDatabase();
    @FXML
    private TextField tfWynagordzenie;


    
    
    
    public void initialize(URL url, ResourceBundle rb) {
        cbStatus.getItems().addAll(
                "Zatrudniony",
                "Urlop",
                "Zwolniony"
        
        );
        cbSpecjalizacja.getItems().addAll(
                "Diagnosta",
>>>>>>> 5c0bc0b3c6418325dbc7de7514639bd0b385bb05
                "Mechanik",
                "Pomocnik"
                
        );
    }
<<<<<<< HEAD
        
        );
        cbSpecjalizacja.getItems().addAll(
        "Diagnosta",
        "Mechanik",
        "Pomocnik"
                
        );
    }    
/**
 * Tworzenie metody zatwierdzenia metody tworzenia do bazy
 * @param event 
 */
=======
    /**
     * Tworzenie metody zatwierdzenia metody tworzenia do bazy
     * @param event
     */
>>>>>>> 5c0bc0b3c6418325dbc7de7514639bd0b385bb05
    @FXML
    private void ZatwierdzZm(ActionEvent event) {

        Statement stmt = null;

        try {

            stmt = sesja.createStatement();
<<<<<<< HEAD
            
            String wynagrodzenie = tfWynagordzenie.getText();
            int wyplata = Integer.parseInt(wynagrodzenie);
            
            
          String query  = "INSERT INTO pracownik (ID, Login, Haslo, Imie, Nazwisko, Miejscowosc, Adres, Telefon, Email, Specjalizacja, Wynagrodzenie, Status) "
                     +"Values(NULL,'"+tfLogin.getText()+
        "','"+tfHaslo.getText()+"','"+tfImie.getText()+
        "','"+tfNazwisko.getText()+
        "','"+tfMiejscowosc.getText()+
        "','"+tfAdres.getText()+"','"+
        tfTelefon.getText()+"','"+
        tfEmial.getText()+"','"+
        cbSpecjalizacja.getSelectionModel().getSelectedItem().toString()+
        "','"+wyplata+
        "','"+cbStatus.getSelectionModel().getSelectedItem().toString()+
     "');";
          
             int wynik = stmt.executeUpdate(query);
            wynik = stmt.executeUpdate(query);
            
            
            
            
=======

            String wynagrodzenie = tfWyagrodzenie.getText();
            int wyplata = Integer.parseInt(wynagrodzenie);

            String query = "INSERT INTO pracownik (ID, Login, Haslo, Imie, Nazwisko, Miejscowosc, Adres, Telefon, Email, Specjalizacja, Wynagrodzenie, Status) "
                    + "Values(NULL,'" + tfLogin.getText()
                    + "','" + tfHaslo.getText() + "','" + tfImie.getText()
                    + "','" + tfNazwisko.getText()
                    + "','" + tfMiejscowosc.getText()
                    + "','" + tfAdres.getText() + "','"
                    + tfTelefon.getText() + "','"
                    + tfEmial.getText() + "','"
                    + cbSpecjalizacja.getSelectionModel().getSelectedItem().toString()
                    + "','" + wyplata
                    + "','" + cbStatus.getSelectionModel().getSelectedItem().toString()
                    + "');";
            int wynik = stmt.executeUpdate(query);

>>>>>>> 5c0bc0b3c6418325dbc7de7514639bd0b385bb05
        } catch (Exception e) {

        }

    }

    @FXML
    private void PowrotTab(ActionEvent event) throws IOException {

<<<<<<< HEAD
      try {
=======
        try {

>>>>>>> 5c0bc0b3c6418325dbc7de7514639bd0b385bb05
            sesja.close();
        } catch (Exception e) {
            helper.error(e.getMessage());
        }
        helper.powrotDoMenu();
        Stage settings = (Stage) b_powrot.getScene().getWindow();
        settings.close();

    }

}
